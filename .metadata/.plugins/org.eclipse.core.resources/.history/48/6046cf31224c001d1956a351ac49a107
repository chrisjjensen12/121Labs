/*********************************************************************
*
* Copyright (C) 2022 David C. Harrison. All right reserved.
*
* You may not use, distribute, publish, or modify this code without
* the express written permission of the copyright holder.
*
*********************************************************************/
#include "DRF0554.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "cy_pdl.h"
#include "cyhal.h"
#include "cybsp.h"
#include <stdbool.h>
#include "cy_retarget_io.h"
#define I2C_HW SCB6
void LCD_begin(uint8_t cols, uint8_t lines);
static void i2c_send_byteS(uint8_t *data, uint32_t addr, uint32_t len);
void LCD_command(uint8_t value);
void LCD_display(void);
void LCD_clear(void);
static void LCD_setReg(unsigned char reg, unsigned char val);
void LCD_setColorWhite(void);
void LCD_setRGB(unsigned char r, unsigned char g, unsigned char b);
void blinkLED(void);
void stopLEDblink(void);
cy_en_scb_i2c_status_t status;
uint8_t _displayfunction;
uint8_t _displaycontrol;
uint8_t _displaymode;
uint8_t _initialized;
uint8_t _numlines,_currline;
cy_stc_scb_i2c_context_t i2cContext;
int counter;


///////// DRF0554.h Functions //////////////

//initialize LCD
bool LCD_Start(){
	counter = 0;
	//initialize I2C
	Cy_SCB_I2C_Init(I2C_HW, &I2C_config, &i2cContext);
	Cy_SCB_I2C_Enable(I2C_HW);

	printf("\nScanning I2C 7-Bit Addressesâ€¦\r\n");
	uint32_t rval;

	// Iterate through the address starting at 0x00
	for(uint32_t address=0; address<0x7F; address++)
	{
		rval = Cy_SCB_I2C_MasterSendStart(I2C_HW, address, CY_SCB_I2C_WRITE_XFER, 100, &i2cContext);
		if(rval == CY_SCB_I2C_SUCCESS)
		{
			printf("Found: 0x%02X\r\n", (unsigned int)address);
		}else{
			return false;
		}
		Cy_SCB_I2C_MasterSendStop(I2C_HW, 0, &i2cContext);
	}

	printf("Scan complete\r\n\n");

	//initialize LCD
	_displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
	LCD_begin(16, 2);

	return true;
}




///////// Helper Functions //////////////


//sends bytes to i2c bus, returns false if fail
static void i2c_send_byteS(uint8_t *data, uint32_t addr, uint32_t len)
{
	counter++;
	uint32_t device_address_sent_ack;
	uint32_t data_byte;
	uint32_t transmission_end;
	printf("\r\n");
	printf("Counter = %d\r\n", counter);
	//send start bits and device slave address
	device_address_sent_ack = Cy_SCB_I2C_MasterSendStart(I2C_HW, addr, CY_SCB_I2C_WRITE_XFER, 100, &i2cContext);
	if(device_address_sent_ack == CY_SCB_I2C_SUCCESS)
	{
		printf("Success sending device address!\r\n");
	}else{
		printf("Error sending device address\r\n");
	}

	//send actual data
	for(int i=0; i<len; i++) {
		data_byte = Cy_SCB_I2C_MasterWriteByte(I2C_HW, data[i], 100, &i2cContext);
		if(data_byte == CY_SCB_I2C_SUCCESS){
			printf("Data byte written\r\n");
		}else{
			printf("Error writing data byte\r\n");
		}
		CyDelay(5);
	}

	//send stop bits
	transmission_end = Cy_SCB_I2C_MasterSendStop(I2C_HW, 100, &i2cContext);
	if(transmission_end == CY_SCB_I2C_SUCCESS){
		printf("Transmission ended\r\n");
	}else{
		printf("Error ending transmission\r\n");
	}

}


void LCD_begin(uint8_t cols, uint8_t lines){

	if (lines > 1) {
		_displayfunction |=  LCD_2LINE;
	}

	_numlines = lines;
    _currline = 0;

	CyDelay(50);	// 50-msec delay

	// Send function set command sequence
	LCD_command(LCD_FUNCTIONSET | _displayfunction);
	CyDelay(5);  // wait more than 4.1ms

	// second try
	LCD_command(LCD_FUNCTIONSET | _displayfunction);
	CyDelay(5);

	// third go
	LCD_command(LCD_FUNCTIONSET | _displayfunction);

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	LCD_display();

	// clear it off
	LCD_clear();

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	LCD_command(LCD_ENTRYMODESET | _displaymode);

	// backlight init
	LCD_setReg(REG_MODE1, 0);
	LCD_setReg(REG_OUTPUT, 0xFF);
	LCD_setReg(REG_MODE2, 0x20);     // all led control by pwm

	//set background
	LCD_setColorWhite();

}


void LCD_command(uint8_t value){
    unsigned char dta[3] = {0x80, value};
    i2c_send_byteS(dta, LCD_ADDRESS, 2);
}

static void LCD_setReg(unsigned char reg, unsigned char val){
	uint8_t data[2] = {reg, val};
	i2c_send_byteS(data, RGB_ADDRESS, 2);
}

void LCD_clear(void){
	LCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
	CyDelay(2000); // this command takes a long time!
}

void LCD_display(void){
    _displaycontrol |= LCD_DISPLAYON;
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}

void LCD_setColorWhite(void){
	LCD_setRGB(255, 255, 255);
}

// color control
void LCD_setRGB(unsigned char r, unsigned char g, unsigned char b){
	LCD_setReg(REG_RED, r);
    LCD_setReg(REG_GREEN, g);
    LCD_setReg(REG_BLUE, b);
}

void blinkLED(void){
	LCD_setReg(0x07, 0x17);  // blink every second
	LCD_setReg(0x06, 0x7f);  // half on, half off
}

void stopLEDblink(void){
	_displaycontrol &= ~LCD_BLINKON;
	LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}

